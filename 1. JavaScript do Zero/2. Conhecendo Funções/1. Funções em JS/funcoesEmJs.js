// üìå Declara√ß√£o de Fun√ß√µes
function saudacao(nome) {
    return `Ol√°, ${nome}!`;
}

console.log('--- Declara√ß√£o de Fun√ß√µes ---');
console.log(saudacao('Maria')); // "Ol√°, Maria!"
console.log();

// üîç Express√µes de Fun√ß√£o
const calculaArea = function(largura, altura) {
    return largura * altura;
};

console.log('--- Express√µes de Fun√ß√£o ---');
console.log(calculaArea(5, 3)); // 15
console.log();

// üé≠ Fun√ß√µes An√¥nimas
console.log('--- Fun√ß√µes An√¥nimas ---');
setTimeout(function() {
    console.log('Executou ap√≥s 1 segundo');
}, 1000);
console.log();

// ‚û°Ô∏è Arrow Functions
const soma = (a, b) => {
    return a + b;
};

const multiplica = (a, b) => a * b;
const dobra = n => n * 2;
const horario = () => new Date().toLocaleTimeString();

console.log('--- Arrow Functions ---');
console.log('Soma:', soma(5, 3));
console.log('Multiplica:', multiplica(4, 2));
console.log('Dobra:', dobra(6));
console.log('Hor√°rio:', horario());
console.log();

// üéØ Par√¢metros Padr√£o
function potencia(base, expoente = 2) {
    return Math.pow(base, expoente);
}

console.log('--- Par√¢metros Padr√£o ---');
console.log('Pot√™ncia (3):', potencia(3));    // 9 (expoente padr√£o 2)
console.log('Pot√™ncia (3, 3):', potencia(3, 3)); // 27
console.log();

// üåü Rest Parameters
function somaVariadica(...numeros) {
    return numeros.reduce((total, num) => total + num, 0);
}

console.log('--- Rest Parameters ---');
console.log('Soma vari√°dica:', somaVariadica(1, 2, 3, 4, 5)); // 15
console.log();

// üè∑Ô∏è Par√¢metros Nomeados (Desestrutura√ß√£o)
function criarUsuario({ nome, idade, email }) {
    return {
        nome,
        idade,
        email,
        dataCriacao: new Date()
    };
}

console.log('--- Par√¢metros Nomeados ---');
const usuario = criarUsuario({
    nome: 'Jo√£o',
    idade: 30,
    email: 'joao@exemplo.com'
});
console.log(usuario);
console.log();

// üîÑ Return
function calcularPrecoFinal(preco, desconto = 0) {
    if (desconto < 0 || desconto > 100) {
        return 'Desconto inv√°lido';
    }
    return preco - (preco * desconto / 100);
}

console.log('--- Return ---');
console.log('Pre√ßo final:', calcularPrecoFinal(100, 20)); // 80
console.log();

// üèÅ Early Return
function processarDados(dados) {
    if (!dados) return null;
    if (dados.length === 0) return [];
    
    return dados.map(item => item.trim());
}

console.log('--- Early Return ---');
console.log('Dados processados:', processarDados(['  texto  ', '  espa√ßos  ']));
console.log();

// üè† Escopo Local & üåç Escopo Global
let variavelGlobal = 'Acess√≠vel em qualquer lugar';

function exemploEscopo() {
    let variavelLocal = 'S√≥ acess√≠vel dentro da fun√ß√£o';
    console.log('--- Escopo ---');
    console.log('Local:', variavelLocal);
    console.log('Global:', variavelGlobal);
}

exemploEscopo();
console.log();

// üîê Closures
function criarContador() {
    let contador = 0;
    
    return function() {
        contador++;
        return contador;
    };
}

console.log('--- Closures ---');
const contador1 = criarContador();
console.log('Contador 1 - chamada 1:', contador1()); // 1
console.log('Contador 1 - chamada 2:', contador1()); // 2

const contador2 = criarContador();
console.log('Contador 2 - chamada 1:', contador2()); // 1
console.log();

// üìû Callbacks
function processarArray(array, callback) {
    const resultado = [];
    for (let item of array) {
        resultado.push(callback(item));
    }
    return resultado;
}

console.log('--- Callbacks ---');
const numeros = [1, 2, 3, 4];
const dobrados = processarArray(numeros, n => n * 2);
console.log('N√∫meros dobrados:', dobrados); // [2, 4, 6, 8]
console.log();

// üëë Fun√ß√µes como Cidad√£os de Primeira Classe
const operacoes = {
    soma: (a, b) => a + b,
    subtracao: (a, b) => a - b,
    multiplicacao: (a, b) => a * b,
    divisao: (a, b) => a / b
};

function calculadora(operacao, a, b) {
    return operacoes[operacao](a, b);
}

console.log('--- Fun√ß√µes como Cidad√£os de Primeira Classe ---');
console.log('Calculadora soma(5, 3):', calculadora('soma', 5, 3)); // 8
console.log('Calculadora divisao(10, 2):', calculadora('divisao', 10, 2)); // 5
console.log();

// üîÆ Fun√ß√µes com Promises
function buscarDados(id) {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            if (id > 0) {
                resolve({ id, nome: 'Usu√°rio' });
            } else {
                reject('ID inv√°lido');
            }
        }, 1000);
    });
}

console.log('--- Promises ---');
buscarDados(1)
    .then(dados => console.log('Dados recebidos:', dados))
    .catch(erro => console.error('Erro:', erro));

// ‚ö° Async/Await (fun√ß√£o auxiliar para o exemplo)
async function buscarPerfil(userId) {
    return { bio: 'Developer', cargo: 'Engenheiro' };
}

async function obterUsuarioCompleto(id) {
    try {
        const usuario = await buscarDados(id);
        const perfil = await buscarPerfil(usuario.id);
        return { ...usuario, ...perfil };
    } catch (erro) {
        console.error('Erro:', erro);
        return null;
    }
}

// Exemplo de async/await
async function demonstrarAsyncAwait() {
    console.log('--- Async/Await ---');
    const usuarioCompleto = await obterUsuarioCompleto(1);
    console.log('Usu√°rio completo:', usuarioCompleto);
}

demonstrarAsyncAwait();

// üåü Boas Pr√°ticas

// üìö Nomenclatura Clara
function calcularTotal(item) {
    return item.preco + item.imposto;
}

// üéØ Princ√≠pio da Responsabilidade √önica
function salvarUsuario(usuario) {
    // Apenas salva no banco (simulado)
    console.log('Usu√°rio salvo:', usuario.nome);
    return true;
}

function enviarEmailBoasVindas(usuario) {
    // Apenas envia email (simulado)
    console.log('Email enviado para:', usuario.email);
    return true;
}

// üìù Documenta√ß√£o com JSDoc
/**
 * Calcula o desconto baseado no valor total e no cupom
 * @param {number} valor - Valor total da compra
 * @param {string} cupom - C√≥digo do cupom de desconto
 * @returns {number} - Valor do desconto
 */
function calcularDesconto(valor, cupom) {
    const descontos = {
        'PROMO10': 10,
        'PROMO20': 20,
        'PROMO30': 30
    };
    
    const percentual = descontos[cupom] || 0;
    return valor * (percentual / 100);
}

// üõ°Ô∏è Tratamento de Erros
function dividir(a, b) {
    if (b === 0) {
        throw new Error('Divis√£o por zero n√£o permitida');
    }
    return a / b;
}

// üîí Imutabilidade
function adicionarItem(array, item) {
    return [...array, item];
}

console.log('--- Boas Pr√°ticas ---');
console.log('Adicionar item (imut√°vel):', adicionarItem([1, 2, 3], 4));

// Tentativa de divis√£o por zero (comentado para n√£o interromper a execu√ß√£o)
// console.log(dividir(10, 0));

// Exemplo de uso das fun√ß√µes de boas pr√°ticas
const itemExemplo = { preco: 100, imposto: 10 };
console.log('Total calculado:', calcularTotal(itemExemplo));
console.log('Desconto calculado:', calcularDesconto(100, 'PROMO20'));

// Exemplo integrado
const userExemplo = { nome: 'Ana', email: 'ana@exemplo.com' };
salvarUsuario(userExemplo);
enviarEmailBoasVindas(userExemplo);